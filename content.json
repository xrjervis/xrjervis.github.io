{"meta":{"title":"Rui \"Siri\" Xie","subtitle":"Greetings! I am Siri, a gameplay programmer pursuing my master's degree at SMU Guildhall","description":"Portfolio Site","author":"Rui Xie","url":"http://ruixie.site"},"pages":[],"posts":[{"title":"Interstellar Racing League","slug":"UE4_InerstellarRacingLeague","date":"2018-07-19T22:55:23.000Z","updated":"2018-07-19T23:03:04.287Z","comments":true,"path":"2018/07/19/UE4_InerstellarRacingLeague/","link":"","permalink":"http://ruixie.site/2018/07/19/UE4_InerstellarRacingLeague/","excerpt":"","text":"Interstellar Racing League is a high-speed, 4 player racing experience. Players are racing along gravity-defying tracks through alien planets to compete for the title of the Galaxy’s Best Racer. Game Trailer Overview Role: Physics Programmer Engine: Unreal Engine 4.17 Genre: Arcade Racing Dev Time: 4 months Team Size: 56 (15 programmers) Download: PC(Windows) Physics ModelFirst ApproachThe first version of the physics model was inspired by a tutorial video created by Space Dust Racing UE4 Arcade Vehicle Physics Tour, in which it introduced the implementation of a basic 4-point hover car physics. In this approach, we: Disable the built-in gravity, and always apply a force downwards to the ground to make the car running on the multi-axis track Put 4 hover force components at each corner of the bottom of the car and added forces upwards, to make the car float to simulate the hovering feel Set linear damping to 0 and use customized 3-axis linear damping Move the center of mass (COM) of the car below the actual model to make the car behave like a tumbler such that prevents the car from flipping over However, the tutorial only covers the basics of the physics, and created issues when the track became complicated. Also, many of the gameplay features we planned for the model were still missing. Our team decided to modify the physics model to meet the needs of our game. Upgraded to 1P1F Physics Model1P1F refers to 1-Point-1-Force. The benefit of using a single point model is that it provides a very intuitive way for us to understand how different forces influence the car. As you might know from the physics class, the easiest way to analyze the resultant force on one object is to destruct them on its COM. Also, we refactored the vehicle blueprint to a component-based architecture, including the suspension component, the stability component, the collision component and input control component. Surface Detection Phase Raycast downward to the track, and stores the hit result for later use. If raycast hits the track, also stores it as the last result Raycast forward in a certain distance to predict any sudden rise of the track Physics Simulation PhaseSuspension Component Use the equation shown below to caculate up and down force X-axis represents the hover height, and the intersection point is the height we want the vehicle to be stable at. Y-axis represents the up force value we apply to the vehicle. Also we clamp the value to prevent applying an infinite larget force when x-&gt;0 and x-&gt;∞. Stability Component Calculate the falldown force according to the steepness of the track that the vehicle is driving on Calculate the air drag force acoording to vehicle’s velocity in X, Y and Z axis According to the hit result we stored in surface detection phase, set current alignment vector and calculate how much torque needed to rotate the vehicle to make it align to the track InputControl Component Calculate vehicle’s horizontal linear force when player presses acclerate and brake buttons By the end of tick function, add forces and torques together and apply to the model’s COM. Gallery","categories":[{"name":"Team Projects","slug":"Team-Projects","permalink":"http://ruixie.site/categories/Team-Projects/"},{"name":"Unreal Engine 4","slug":"Team-Projects/Unreal-Engine-4","permalink":"http://ruixie.site/categories/Team-Projects/Unreal-Engine-4/"}],"tags":[{"name":"UE4","slug":"UE4","permalink":"http://ruixie.site/tags/UE4/"}]},{"title":"Feline Friendship Force","slug":"Unity_FelineFriendshipForce","date":"2018-07-18T22:55:23.000Z","updated":"2018-07-20T00:07:28.157Z","comments":true,"path":"2018/07/18/Unity_FelineFriendshipForce/","link":"","permalink":"http://ruixie.site/2018/07/18/Unity_FelineFriendshipForce/","excerpt":"","text":"Responsibility Create and maintain relevant production tasks on the scrum board related to my role. Make tasks for sprint and milestone. Work with faculty advisor and team to create technical direction. Participate in team presentations. Create and keep planning documents/sections current: GDD &amp; Sprint Burn-down sections. Code game components and communicate technical design. Keep programming scrum board section current. Review and approve code before going into game. Make and iterate the Enemy AI. Approve UI implementation. Make daily builds. Gameplay FeaturesMovementAll the movement of the characters is controlled by player input. At the beginning of the game, GameController starts to listen to all events like OnNodeDown, OnNodeUp, and OnNodeDragHit. In MouseController script, the program detects player’s input every frame. Whenever player triggers an event, MouseController informs GameController through the EventManager to call the corresponding method.NodeConnection indicates how nodes connect with each other. Players can re-pick the node when they keep pressing on the screen and can only move to the adjacent node. BoxBox element can hide cats from dogs. When the player moves the cat into a box, the cat disappears along with a green outline shader showing on the box, indicating that player can move the cat outside the box as well.Dogs cannot see the cat inside the box, but they can move through the node with a box on it still. WaterWater is an obstacle which blocks the movement of both cats and dogs. Dogs cannot even see through the water. There is a pressure plate on another node which controls the water. Whenever there’s an object standing on it, no matter a cat or a dog, the water is off, which means the obstacle is gone. Enemy AIEnemy AI conveyance is clear. Dogs can see through nodes connected in a straight line unless there are any obstacles. If the dog sees a cat, it turns to chase mode. If the dog cannot see a cat anymore, it turns to still mode with a question mark on its head.","categories":[{"name":"Team Projects","slug":"Team-Projects","permalink":"http://ruixie.site/categories/Team-Projects/"},{"name":"Unity","slug":"Team-Projects/Unity","permalink":"http://ruixie.site/categories/Team-Projects/Unity/"}],"tags":[{"name":"UNITY","slug":"UNITY","permalink":"http://ruixie.site/tags/UNITY/"}]},{"title":"RayX Engine","slug":"Personal_RayXEngine","date":"2018-07-17T22:55:23.000Z","updated":"2018-07-19T19:53:09.368Z","comments":true,"path":"2018/07/17/Personal_RayXEngine/","link":"","permalink":"http://ruixie.site/2018/07/17/Personal_RayXEngine/","excerpt":"","text":"","categories":[{"name":"Indiviual Projects","slug":"Indiviual-Projects","permalink":"http://ruixie.site/categories/Indiviual-Projects/"},{"name":"Personal Engine","slug":"Indiviual-Projects/Personal-Engine","permalink":"http://ruixie.site/categories/Indiviual-Projects/Personal-Engine/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://ruixie.site/tags/C/"}]},{"title":"Data-Driven GameBuilder 2D","slug":"DFS_GameBuilder","date":"2018-07-16T22:55:23.000Z","updated":"2018-07-19T16:48:16.348Z","comments":true,"path":"2018/07/16/DFS_GameBuilder/","link":"","permalink":"http://ruixie.site/2018/07/16/DFS_GameBuilder/","excerpt":"","text":"DFS Final PresentationA 2D data-driven game builder that can be used to author many 2D game types easily from XML data files. Property Tree generate, copy, delete recursively EntityDefinition load data from XML When creating an entity, it holds a copy Definitions For registration Entity Definition Map Definition Tile Definition GameConfig global data resource loading Input binding Runtime Map Reload NOT a full reload Just overrides data (definitions &amp; game config) Event System Supported events OnOverlapBegin OnOverlapStay OnOverlapEnd OnHit Died Compare entity pairs of last frame and this frame seperate OnHit and OnOverlap events Overload Triggers Trigger events on entity pairs &lt;self, other&gt; Trigger events on certain entity Trigger events on all entities (broadcast) Command System Supported commands AddMovement Destroy Damage SetOrientation SpawnEntity Post-Mortem Lots of potentials Thanks to git! Debugging is HARD!!! 80% of Time No debug system to visualize entities’ current stats Tiles are batched but entities are not the way to organized entities No enough time for playtest","categories":[{"name":"Indiviual Projects","slug":"Indiviual-Projects","permalink":"http://ruixie.site/categories/Indiviual-Projects/"},{"name":"Personal Engine","slug":"Indiviual-Projects/Personal-Engine","permalink":"http://ruixie.site/categories/Indiviual-Projects/Personal-Engine/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://ruixie.site/tags/C/"}]}]}